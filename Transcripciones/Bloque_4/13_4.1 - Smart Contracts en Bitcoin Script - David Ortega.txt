Speaker 0 | 00:18.890
Los smart contracts pueden ser escritos en diferentes lenguajes de programación, siempre y cuando exista el compilador y librerías capaces de traducir y servir de interfaz con las distintas capacidades smart contracts de la blockchain que usemos. Esto significa que es posible usar cualquier lenguaje de programación para crearlos, pero los desarrolladores de la blockchain deben crear el set de herramientas básico para tal fin. En tal sentido, algunos de los lenguajes de programación que podemos usar para crear smart contracts son los siguientes. En Bitcoin, el lenguaje de programación por defecto es Bitcoin Script. Este lenguaje es un lenguaje de programación diseñado para Bitcoin y es el responsable de permitir la programación de transacciones dentro de la propia red para hacer que Bitcoin cumpla con la premisa de que es un dinero digital programable. Si bien, Bitcoin Script es un lenguaje de programación bastante limitado debido a que no es Turing completo y que funciona mediante un esquema de tipo pila. Esto hace que Bitcoin Script no solo sea complejo de programar, sino también limitado en las características y funciones que presenta. De hecho, Bitcoin Script está limitado a sólo 256 tipos de instrucciones distintas conocidas como opcodes, muchas de las cuales aún no han sido definidas porque Satoshi Nakamoto dejó estas en blanco con el fin de mejorar sus capacidades en el futuro. pensando en las necesidades que pudiera tener la red en los años por venir. El lenguaje script de Bitcoin posee varias características y cualidades entre las que podemos mencionar que es simple y requiere un procesamiento mínimo, que su funcionamiento es limitado, lo cual aporta mayor seguridad al sistema, y que al ser un lenguaje turning completo no posee bucles, lo cual asegura que el programa deja de repetirse y termina. De esta manera evitamos la posibilidad de que ocurran errores y códigos maliciosos a la red de Bitcoin. Otras características es que su simplicidad le permite ser implementado en una amplia gama de dispositivos. Además, no hay un estado anterior o posterior a la ejecución del script. Toda la información necesaria para ejecutar el script debe estar contenida en el propio script. El lenguaje está basado en una pila y puede usar dos tipos. Una pila principal y otra pila alternativa, donde esta última se emplea para el almacenamiento de datos, de cálculos y de pasos intermedios, de una forma muy parecida a la tecla de memoria en las calculadoras. El lenguaje de script de Bitcoin es bastante pequeño, solo puede contener 256 instrucciones, ya que cada instrucción está expresada en un byte. El propósito de la creación de un lenguaje script en Bitcoin es el de proporcionar una serie de parámetros fáciles y flexibles para poder posibilitar una transacción. Así, cuando Satoshi Nakamoto desarrolló Bitcoin, deshabilitó varias funciones, entre ellas por ejemplo la multiplicación, por lo que el script se mantiene simple en términos de programación. Entonces, este lenguaje de programación es lo que determina si una operación puede realizarse o no, es decir, si dicha operación está autorizada para la transferencia de fondos. En pocas palabras. La creación de Bitcoin Script es lo que otorga la naturaleza programable de Bitcoin. Es lo que nos permite, por ejemplo, enviar una transacción y que la misma se valide sola si determinadas condiciones se cumplen. Esta propiedad es algo único de Bitcoin y las criptomonedas, algo que el dinero actual no puede alcanzar, y mucho menos el arcaico dinero físico. Es la evolución del dinero llegado a un punto en que incluso este puede actuar de forma independiente y descentralizada atendiendo simplemente a la programación incrustada en el mismo. Por otra parte... El script de Bitcoin también evita la creación de errores en el sistema y el uso innecesario de transacciones muy complejas. De hecho, el script hace que las transacciones sean relativamente fáciles de calcular. Además, los bucles infinitos requieren muchísima más potencia de cálculo y relativiza las redes, como se mencionó al principio. Miniscript es un lenguaje de programación que facilita la generación de smart contracts para Bitcoin. Miniscript permite que el software analice automáticamente un script incluyendo la determinación de los datos de los testigos que deben generarse para gastar los bitcoins protegidos por ese script. La representación estructurada de los scripts de Bitcoin proporcionada por Miniscript permite a los monederos ser mucho más dinámicos con los scripts que utilizan. Para apoyar este dinamismo los Miniscripts pueden ser creados usando un lenguaje de políticas de fácil escritura Miniscript es un lenguaje de programación que facilita la generación de smart contracts para Bitcoin. Las políticas son componibles, permitiendo que cualquier subexpresión válida sea reemplazada por otra subexpresión válida, dentro de ciertos límites impuestos por el sistema de Bitcoin. Inicialmente, el lenguaje fue diseñado para ser parecido a Javascript, sin embargo, el desarrollo del proyecto dejó de ese desarrollo y lo trasladó a Rust, el cual sigue en desarrollo y ya se encuentra en proceso de ser integrado en Bitcoin Core. Vyper es un lenguaje de programación basado en Python dirigido a crear smart contracts para la máquina virtual de Ethereum. Al estar basado en Python, este lenguaje disfruta de una enorme facilidad para desarrollar aplicaciones distribuidas para quienes están acostumbrados a este lenguaje. Y al mismo tiempo, se alimenta de las potentes herramientas de depuración que ya están creadas para el mismo. Entre los principales objetivos de Vypr tenemos ofrecer una mejor seguridad, básicamente porque debe ser posible y natural tener contratos inteligentes seguros en Vypr. También la simplicidad del lenguaje y del compilador. Además, queremos mejorar la auditoría del código. el código de Vyper debe de ser lo más legible posible y además debe de ser lo más difícil posible escribir código engañoso en él. La simplicidad para el lector es más importante que la simplicidad para el escritor y la simplicidad para los lectores con poca experiencia previa con Vyper y con poca experiencia previa en la programación en general es particularmente importante para este lenguaje. Además, Vyper permite una mejor comprobación de límites y desbordamiento o especialmente en los accesos a Arrays y en la aritmética. Viper puede ser usado en Ethereum o en cualquier red de Ethereum Virtual Machine compatible como Polygon, BNB Chain u otras redes derivadas de la EVM y sus primitivas criptográficas Haskell es un lenguaje de programación muy usado en el mundo científico y es el lenguaje elegido por Cardano Haskell destaca por ser un lenguaje de programación funcional que es muy adecuado para código de alta seguridad y programas que requieren un alto grado de verificación formal Esto permite a los programadores que puedan tener un mayor grado de certeza en que el código que han implementado es correcto, lo que, sin duda, ayuda a mantener la seguridad de los smart contracts y de las plataformas que dependan de ellos. En Cardano, Haskell permite que los contratos inteligentes de Plutus y Marlowe puedan ser cuidadosamente implementados en un código preciso y formalmente verificado, que ofrece un alto nivel de seguridad desde el principio. Plutus y Marlowe se ofrecen como un conjunto de bibliotecas, aprovechando la documentación existente de Haskell. los juegos de herramientas y una comunidad altamente profesional para proporcionar una base a partir de la cual construir contratos inteligentes, seguros y de calidad empresarial. Tanto el código off-chain como on-chain de Cardano está escrito en Haskell, lo que permite a Cardano heredar el rico cuerpo de investigación ya existente dentro del ecosistema de Haskell en lugar de reinventar la rueda con un lenguaje de contratos inteligentes totalmente nuevo y no probado. Básicamente, Haskell es un lenguaje que ha sido probado, que es seguro y que puede ser perfectamente utilizado para crear Smart Contracts Turing completo, que pueden ser verificados formalmente en cualquier momento. Como hemos podido ver durante el tema, los smart contracts pueden venir de diferentes maneras. Los podemos desarrollar en Solidity, los podemos desarrollar en Vypr, o incluso en lenguajes que no hemos visto en este curso, como puede ser el LLL. Estos lenguajes, al final, lo que nos van a permitir es desarrollar nuestros smart contracts con base a toda la potencia que nos puede dar la blockchain de Ethereum y, gracias a ellos, poder desarrollar. crear ese bytecode, subirlo a la blockchain y ejecutarlo de forma descentralizada en nuestras aplicaciones. A partir de aquí, lo que nos quedaría es seguir investigando y profundizando en todo el mundo de los smart contracts y sus lenguajes de programación.