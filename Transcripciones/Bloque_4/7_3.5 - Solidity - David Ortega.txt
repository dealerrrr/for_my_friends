Speaker 0 | 00:18.262
El nombre de Solidity hace referencia a un lenguaje de alto nivel de tipo estático con el que se pueden programar Smart Contracts para la red Ethereum. Su sintaxis es muy similar a la de lenguajes conocidos como puede ser C++ o Javascript. Solidity fue creado con el propósito de permitir la escritura de Smart Contracts de forma sencilla para la red Ethereum. Se trata de un lenguaje diseñado para sacar el máximo provecho de la EVM, permitiendo la creación y desarrollo de Smart Contracts que puedan ser ejecutados de forma óptima en ella. ¡Gracias por ver el video! El programador puede desarrollar sus aplicaciones en un lenguaje sencillo de utilizar, leer y mantener, para que al terminar, el motor de Solidity convierta ese código sencillo en el código máquina que la EVM va a poder entender. Un código máquina prácticamente imposible de entender por una persona. En esencia, Solidity facilita el desarrollo de smart contracts sobre Ethereum. Y aunque no es el único lenguaje, sí que fue el primero, fue el más versátil y sobre todo es el que más contratos inteligentes tiene desarrollados en este momento. La principal característica de Solidity es que es un lenguaje Turing completo. Un lenguaje Turing completo es un lenguaje que nos permite tener una gran diversidad de operaciones y por lo tanto generar aplicaciones para prácticamente cualquier tipo de problema. El hecho de que sea Turing completo también implica que se debe disponer de un mecanismo de protección para evitar el mal uso. Este mecanismo es conocido como el gas y sirve para evitar que el sistema, que es la Ethereum Virtual Machine, pueda ser colapsada. por la creación de bucles infinitos o de otras acciones maliciosas. Este gas funciona como el gasto computacional que conlleva procesar una transacción o un smart contract dentro de la red. El gas lo podríamos ver, haciendo una pequeña analogía, como los kilovatios hora de la luz. Al final nos va a permitir tener una compensación de precio entre la subida y bajada del precio del Ethereum y el precio que vamos a tener que pagar por realizar una transacción dentro de la Ethereum Virtual Machine. Ethereum nació como una alternativa a la red de Bitcoin. Su creador, Vitalik Buterin, en su momento propuso incorporar un lenguaje de tipo Turing completo a la red de Bitcoin, ya que consideraba que el lenguaje con el que fue desarrollado Bitcoin era insuficiente para la evolución de la red. Pero al no recibir ninguna respuesta por parte de los desarrolladores, Buterin decidió crear y desarrollar su propio proyecto, Ethereum. Hoy en día, Bitcoin y Ethereum son las dos redes más valiosas. Son las más conocidas y son las más empleadas por la comunidad de criptomonedas. ocupando el primer y segundo lugar respectivamente. No obstante, Bitcoin y Ethereum poseen grandes diferencias. Por ejemplo, Bitcoin, la moneda de la red Bitcoin, fue creada como medio de pago y como resguardo de valor, mientras que Ethereum fue desarrollada con la finalidad de ser mucho más flexible y programable, permitiendo evolucionar con nuevas capacidades en el tiempo. Esto es gracias a la EVM y a Solidity, las dos herramientas que permiten a los desarrolladores sacar el máximo provecho de Ethereum. se facilita la tarea de desarrollar aplicaciones distribuidas u otras funciones que hagan uso de los smart contracts. El desarrollo de Ethereum comenzó como una idea en la mente de Gavin Wood. La idea fue materializada por Christian Rittwisner junto a un equipo de trabajo. El resultado de este trabajo llegó a Solidity. Desde entonces, el desarrollo de Solidity ha mantenido su evolución y en la actualidad se encuentra en la versión 0.8.13. Esto es a fecha de 16 de marzo del 2022. Solidity es un tipo de lenguaje orientado a objetos, como puede ser C++ o Csharp. Fue diseñado específicamente para desarrollar aplicaciones para la red de Ethereum, por lo que sólo corre en la blockchain de Ethereum o otras derivadas compatibles, como puede ser Polygon. Una ventaja que posee este lenguaje es que el código fuente de los programas, que son realizados con él mismo, puede ser accedido públicamente desde la red blockchain. Incluso estando en Bytecode es posible de compilarlo y obtener una muestra bastante clara de cómo era el código fuente original. Gracias por ver el video Solidity soporta la herencia y la herencia múltiple, dotándolo de una gran flexibilidad a la hora de programar elementos complejos. Este lenguaje también proporciona una serie de bibliotecas muy útiles que facilitan la programación de los smart contracts, haciendo que el código sea reutilizable y mucho más sencillo de mantener. Como casi todo lenguaje de programación, Solidity puede explotar las ventajas de un entorno integrado de desarrollo o IDE. En Ethereum, el IDE oficial es conocido como Remix. Este facilita a los desarrolladores la creación de smart contracts, a la vez que permite tener acceso al estado y propiedades de estos smart contracts ya creados. Además, cuenta con poderosas herramientas de corrección y análisis de código para ayudar a los desarrolladores a depurar sus programas. Remix también puede ser ejecutado y usado de forma online a través de Firefox o Chrome o directamente en nuestro ordenador. Y aunque este es el IDE oficial de Ethereum, también existen otros entornos compatibles con el lenguaje de Solidity.