Speaker 0 | 00:33.815
Bloque 7, unidad 3. Este algoritmo funciona a través de criptografía simétrica. Así, el sistema genera dos claves que reciben el nombre de clave privada y clave pública. Ambas claves están relacionadas por una compleja operación matemática realizada sobre una función de curva elíptica. Bajo este esquema de funcionamiento, SDSA garantiza en primera instancia lo siguiente. Primero, firmas únicas e irrepetibles para cada conjunto de generación de claves privadas y públicas. Dos, la imposibilidad práctica de falsificar las firmas digitales. Esto es así porque la potencia computacional necesaria para ello está fuera de los límites actuales. Punto tres, gracias a estas dos características anteriores, SDSA se considera un estándar seguro para desplegar sistemas de firmas digitales y por ello ha sido elegido para ser parte de Bitcoin. y de su sistema de dinero digital sin confianza. El funcionamiento de SDSeA para generar un par de claves puede describirse en el siguiente algoritmo. SK es el primer paso donde el algoritmo decide generar nuestra clave privada. Usando la curva secp256k1, dada por la fórmula y al cuadrado es igual a x a la 3 más 7, lo que hace el algoritmo en esa primera línea muestra la imagen es generar un número decimal muy grande de 256 bits o 32 bytes aleatorio y convertir dicho número en el factor x que se sustituye en la fórmula. Al resolver la fórmula, el sistema nos genera un decimal de 256 bits como el que muestra la siguiente imagen. Este número sería nuestra clave privada para nuestro monedero Bitcoin. Con nuestra clave privada, lo siguiente es generar nuestra clave pública, la cual se genera usando la fórmula SK por G es igual a P, que vemos en la siguiente imagen. En esta fórmula SK es igual a Y es la clave privada que hemos calculado. G es un punto dentro de las posibilidades de la curva SecP256K1. P, sin embargo, es nuestra clave pública generada para la clave privada obtenida. Finalmente, se elige un punto de la curva G y se multiplica por la clave privada, con lo que obtenemos la clave pública correspondiente a nuestra clave privada. Calculados ambos números decimales, lo que sucede después es una transformación con el fin de reducir el tamaño de las claves, que en este caso es llevar ambas claves a su modo hexadecimal, con lo que nos quedaría con la clave privada. una clave privada con mucho menos caracteres. Finalmente, estas claves son almacenadas en un formato conocido como WIF, Wallet Import Format, que permite trabajar de forma segura con las claves privadas, lo que nos deja las claves en este sentido. Con este procedimiento es que se generan las claves para manejar nuestros bitcoins. Por supuesto, cada monedero tiene su propia implementación, lo que les puede hacer más o menos seguros. dependiendo de las protecciones criptográficas que se tomen en cada una de ellas. Ahora que ya tenemos nuestras claves públicas y privadas creadas, es momento de generar las direcciones de Bitcoin, que no son más que una forma sintetizada de la clave pública. Recordemos que en Bitcoin, las direcciones públicas tienen generalmente esta apariencia, que son un conjunto de letras y números alternados cuya longitud varía entre 26 y 32 caracteres. Para crear una dirección hace falta un total de 9 pasos que explicaremos detalladamente a continuación. El proceso para crear una dirección de Bitcoin se inicia con la generación de una clave privada. Esta nos proporcionará el uso exclusivo de los fondos. A partir de esta se genera una clave pública que nos permitirá compartir información con otras personas sin poner en riesgo nuestros fondos. La obtención de la clave pública a través de la clave privada se debe gracias a la aplicación del algoritmo SDCA. Una implementación muy eficiente en la criptografía de curva elíptica, donde se emplea como punto generador a la curva Secp256k1 para obtener la clave pública. Entonces, una vez generada este par de claves, se da inicio al proceso de generar las direcciones públicas de Bitcoin. El primer paso es seleccionar la clave pública obtenida a partir de la generación de claves. Esta clave debe estar en formato hexadecimal. Seguidamente debemos aplicar un hashing a la clave pública por medio de la implementación del algoritmo SHA-256. Este algoritmo permite generar outputs de extensión fija a partir de un input de extensión variable que son irreversibles y no es posible deducir la clave privada a través de la clave pública. Luego de aplicar la función de hashing obtendremos una secuencia de 256 bits. El tercer paso es hashear de nuevo la salida obtenida anteriormente, aplicando en este caso el algoritmo ripend-160, con el cual produce una secuencia de 160 bits como muestra la imagen. Seguidamente debemos añadir el byte de versión usado para la red principal de Bitcoin, 0x00. delante de la salida obtenida de la aplicación del algoritmo de hashing, ripmd-160. Con esto obtendremos una dirección Bitcoin en formato hexadecimal que se verá como la siguiente imagen. Al añadir este byte, también permite identificar y distinguir las direcciones Bitcoin de otras criptomonedas que también emplean el mismo protocolo. Ahora debemos realizar el hash con el algoritmo shadow56. Al resultado que hemos obtenido... de realizar anteriormente el algoritmo RIPMD 160. Este paso es necesario como mecanismo de verificación para comprobar que la dirección de Bitcoin está bien escrita. Y con ello debemos aplicar el hash con el algoritmo YADO56 nuevamente al resultado del hash anterior. Con este paso se concatena la dirección obtenida. Como ya mencionamos, el algoritmo YADO56 se aplica dos veces como mecanismo de verificación. Ahora debemos elegir los cuatro primeros bytes del último hash. de SHA256 que representan el checksum de la dirección Bitcoin. Agregamos los 4 bytes del checksum del punto anterior al hash extendido de array PMD160 del punto anterior. Esto es una dirección binaria de Bitcoin de 25 bytes. Finalmente, convertimos el resultado de la cadena de bytes utilizando la codificación en base 58 utilizada para codificar las direcciones de Bitcoin. Con lo que la cadena de bytes se transformará en una cadena en base 58, como muestra la imagen. Este es el formato más empleado para las direcciones de Bitcoin. Así la codificación base 58 convierte la cadena de bytes en un conjunto de números y letras mayúsculas y minúsculas. Esto con la finalidad de que sean más fáciles de distinguir aunque en conjunto siguen siendo caracteres ilegibles y que a primera vista no son crípticos. Para entender cómo funcionan y se verifican las transacciones de Bitcoin debes tener muy en cuenta cómo se generan las claves públicas y privadas, y segundo, lo que ello representa. El modelo matemático de SDSA ha sido diseñado para que nos permita generar pares de clave de forma muy rápida. Y hacemos mucho énfasis en generar porque crear las claves es sencillo a nivel matemático y computacional, pero romperlas es prácticamente imposible. Para dejarlo más claro aún, podemos tomar un número cualquiera con 256 bits de extensión y transformarlo en nuestra clave privada, usando SDS-A con la SCSECP256K1. De ese número clave privada, podemos generar cientos de miles de millones de claves públicas relacionadas matemáticamente. siendo todas y cada una de ellas muy seguras. Lo que no puede hacer es el proceso inverso, es decir, tomar una clave pública y obtener de la clave pública la clave privada de la misma, con lo que obtendremos el control de todo el sistema. Esto es posible porque el problema matemático presente en SDSeA es tan complejo que ni todas las supercomputadoras del mundo juntas podrían hallar todas las soluciones posibles al mismo. y si lo hacen, les tomaría millones de años en hacerlo. Ahora bien, ¿esto nos dice que las claves son seguras? Hasta el punto de podemos decir que una clave es solo conocida por su auténtico dueño. Así, quien tome posesión de unos bitcoins en una dirección es su dueño porque tiene el control. la clave privada, usada para generar la clave pública a la que se ha enviado dicho Bitcoin. La dirección es una forma de clave pública sintetizada. Pero ¿cómo se demuestra esto? La respuesta tiene dos partes. El script que acompaña la transacción y la firma digital dentro de la misma. Bitcoin autentifica las transacciones y los remitentes con firmas digitales creadas usando pares de claves. El remitente quiere que la cantidad correcta de Bitcoin sea transferida a la persona correcta, a su cartera, y el receptor quiere asegurarse de que los datos son exactos y provienen del remitente. La ejecución comprende cinco pasos. El primero, los datos. Se inyecta la operación en Bitcoin Script resolviendo previamente un acertijo. El segundo paso es Shadow 56, con el cual se genera la operación. El tercer paso es SDSA, se toma la clave privada al remitente. El cuarto paso es la firma digital. Se crea una firma digital que el destinatario tendrá que resolver. El quinto paso es el desafío al destinatario. Aquí el destinatario ha de resolver el puzzle para acceder al dinero utilizando la clave privada de su monedero y generando una clave pública en forma de hash que tenga que ser idéntica. Solo en el último caso es cuando realmente una operación se autentica para gastos, un proceso en el que se puede participar el dueño de la dirección, siendo que los mineros y los nodos tienen solo posibilidades para resolver una verificación parcial del script. lo que les permite decidir si la operación está bien formateada y si por lo tanto es válida para integrarse al historial. O por el contrario, está mal formateada y debe ser rechazada completamente, con lo que el destinatario verá que la transacción desaparece. Detallando las operaciones, ahora que conocemos los fundamentos de las transacciones, vamos a sumergirnos en algunos detalles. Recibiendo Bitcoins. Usted decide vender su coche antiguo, y un comprador ofrece pagar con bitcoins, lo que debe proporcionar una dirección de bitcoins. Creas una dirección usando una clave pública derivada de tu clave privada, lo que da como resultado una PUBKeyHash, una clave pública en formato hash, la cual lo conviertes en una dirección bitcoin que empieza por uno o con tres con el formato base 58. Se puede realizar ingeniería inversa del public key hash a partir de la dirección, pero no se puede obtener la clave pública a partir del public key hash. Con la dirección proporcionada se creará una salida de transacciones que contiene. Primero, el TxId de la operación y segundo, la cantidad total en Satoshi, la unidad más pequeña de Bitcoin. Tercero, el script PubKey que bloquea la cantidad en su PubKey hash. Así, cuando finalmente quieras gastar los 10 Bitcoins, tu clave privada se utilizará para alimentar el PubKey script y desbloquear el Bitcoin recibido. en donde el pubkey hash es este que veis en la foto. Este dato es el que representará el desafío que debe completar el dueño de la dirección a la que se envían los fondos. Solo completando el desafío podrá tomar el control de los mismos. La transacción debe ser validada y minada por los mineros. Normalmente en 10 minutos, pero a veces puede ser que tarde un poco más. Para ser completada, y entonces, tu monedero indicará el depósito de 10 bitcoins. El monedero no contiene el dinero como un monedero del mundo real, solo una salida llamada UTXO. Los UTXOs se desbloquean cuando envías una parte o la totalidad de bitcoins a otra dirección, creando un nuevo UTXO. La red Bitcoin no es un sistema basado en cuentas, sino una matriz de UTXOs. Los monederos contienen las claves para desbloquear esos UTXOs y transferirlos a otros. Si envías cualquier cantidad de Satoshis, crearás un nuevo UTXO para esa transacción. Y o bien envías todo el Bitcoin con el nuevo UTXO único, o bien se crea un segundo UTXO nuevo con el resto. que se te devuelve directamente. Ahora, ¿quieres gastar ese Bitcoin de la venta del coche para pagar tu casa nueva? Por lo tanto, crearás una nueva entrada y una nueva salida. La entrada. Así empiezas con el ID de la transacción y el índice para localizar el UTXO y el script pubkey de la venta. A continuación, se creará un nuevo script SIG y el script pubkey. Script de firma, que se les llama, que este script lo que hace es satisfacer el script de Pubkey y desbloquear los bitcoins que hemos recibido. Este script SIG o script de firma tiene una firma en la que se puede comprobar todos los datos de las transacciones para enviar y la clave pública del nuevo destinatario. Esos datos son TxId de la transacción antigua, el índice antiguo, el script pubkey del remitente anterior y el script pubkey del nuevo destinatario. el total de Satoshis que van al nuevo destinatario, y todos estos datos se terminan convirtiendo en hash dos veces con el algoritmo de Shadow56 y se firman con su clave privada. Este producto se añade entonces a su clave pública para crear el nuevo Script SIG. La salida en este caso contiene los Satoshis que se van a transferir. un nuevo índice y un nuevo script pubkey con la dirección del nuevo destinatario, la cual ha proporcionado para bloquear el Bitcoin a su dirección. Finalmente enviamos la operación a la red y los mineros la toman. En este punto los mineros tomarán el script C y lo ejecutarán en el script pubkey. Si el resultado es verdadero, las transacciones se añaden al bloque y se valida. Si por el contrario es falso, se rechaza la operación porque la misma es inválida. En todo caso, el Script Pubkey utiliza el siguiente proceso apilado de seis pasos para verificar. Puede devolver falso, puede devolver verdadero. La transacción... solo aplica al caso de transacciones P2PKH. Añadir el script SIG y luego aplicar sobre éste la clave pública, la PubKey. En todo caso, el script PubKey utiliza el proceso de apilado para verificar si es verdadero o falso.