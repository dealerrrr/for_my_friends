Saludos y bienvenidos a este nuevo video en el que te enseñaremos a cómo generar y desplegar
una pequeña aplicación descentralizada para que puedas probar todo el poder que Solidity
puede ofrecerte.
En esta ocasión vamos a utilizar algunas herramientas de las que ya hemos hablado anteriormente,
como lo son Solidity, Javascript y Ganache, un pequeño entorno de desarrollo que nos
permitirá crear o generar una aplicación o una blockchain del tipo Ethereum con todas
sus capacidades, incluyendo una EVM para que podamos generar aplicaciones escritas dentro
de lo que sea el lenguaje de programación Solidity y que podamos desplegarlas para probarlas
y así poder tener nuestra primera experiencia generando una aplicación descentralizada.
En este caso vamos a investigar un poco algunas de las herramientas que usaremos dentro de
lo que sería este pequeño desarrollo y vamos a ir primero a Ganache, que es el servicio
que va a permitirnos generar nuestra blockchain para poder llegar y desplegar estos smart
contracts que vamos a generar.
En este caso es una sencilla aplicación, generaremos un smart contract y a partir de
allí empezaremos con el desarrollo y el despliegue de esta aplicación.
Como ya anteriormente había comentado, Ganache es simplemente una aplicación que nos permite
generar una blockchain de tipo prueba, que nos permite conectarlos a lo que sería Metamask
u otro tipo de monedero web 3 y desplegar sobre ella aplicaciones descentralizadas que
estemos generando de forma local en nuestro computador.
Esta es su página principal, es una parte o es parte esencial de lo que sería la suite
de Truffle y podemos descargarla aquí tanto para Linux como para otros sistemas operativos
como pueden ser Windows y Mac OS.
En este caso estamos utilizando un sistema operativo Linux, en este caso Ubuntu 22.04
y simplemente con hacer clic en Download comenzamos con el proceso de descarga de esta aplicación
que simplemente debemos ejecutar con un simple clic para empezar entonces a poder utilizarla.
En este caso ya la aplicación la hemos descargado y simplemente podemos ejecutarla haciendo
ganache.appimage, ustedes pueden hacer clic, yo ya la he puesto en un path para que se
ejecute con este comando y simplemente aquí tenemos ya un workspace de Ethereum que puede
ser creado fácilmente utilizando el botón de New Workspace, vamos a generar esto para
que puedan cambiar aquí, vamos a borrar este workspace y simplemente con hacer clic
en New Workspace generamos todo lo que sería un espacio de trabajo para la red de Ethereum
y que nos servirá perfectamente para llegar y desplegar esta aplicación descentralizada.
En este caso podemos ver que tenemos una mnemonic, nuestra frase semilla, 12 palabras,
nuestras cuentas de Ethereum con 100 Ethereum de prueba que nos servirán de mucha ayuda
para lo que sería el desarrollo de nuestra aplicación descentralizada y adicional a
eso tenemos toda la información de la blockchain, en este caso que hemos generado de forma local,
tenemos que estamos dentro de lo que sería el bloque 0, no se ha generado el bloque inicial,
los datos de GasPrice y GasLimit de nuestra blockchain, estamos ejecutando un hardfork
Muvir Glacier que sería la última versión de Ethereum en el tipo POU y también tenemos
nuestro identificador de red y la dirección de nuestro servidor RPC que nos servirá para
interconectar lo que sería nuestra wallet metamask con todo lo que sería el servicio
que Ganache nos está ofreciendo. Una vez hecho esto, nuestro siguiente paso para generar lo
que sería el Workspace de trabajo o nuestro entorno de trabajo en este caso sería tener
instalado algunas herramientas como son NPM que nos permitirá en este caso llegar, en
este caso sería Node.js que incluye NPM. Node.js es el servidor de JavaScript que nos
permitirá generar todo el código necesario para que podamos crear nuestra aplicación
y conectarla a lo que serían los servicios que la blockchain, en este caso la blockchain
que Ganache nos está ofreciendo, puede permitirnos. Node es una aplicación que pueden descargar
desde esta página nodejs.org y para este caso muy particular, fíjense que aparecen
dos versiones que son la Node 18.12.1 LTS que es la versión estable con largo tiempo
de desarrollo y de mantenimiento y la versión 19.1 Current que es la versión más actual
de este tipo de servidores. Sin embargo, para nuestro uso personal en este caso vamos a
descargar una versión mucho más antigua que sería la versión 16. Para ello simplemente
tienen que ir a todas las opciones de descargas y debemos ir a la versión 16 que en este
caso se puede ver aquí con Lates v16 y bajamos la última versión que en este caso sería
16.1 linux amd64, en este caso estamos ejecutando sobre un sistema linux amd64, entonces nuestra
versión sería esta. O en el caso de que estés ejecutando Windows tendrías que bajar
las versiones más actualizadas para Windows que están en este caso aquí mostrándose
en pantalla. Esta es una de las formas para instalar lo que sería Node 16 o puedes utilizar
la siguiente, el siguiente desarrollo que es NVM, que en este caso es la forma más
sencilla para poder llegar y desplegar este tipo de versiones de Node que nos servirán
para llegar y tener todas las herramientas de desarrollo que necesitamos para generar
nuestra aplicación de ejemplo. Como ven este Node es muy sencillo de instalar, simplemente
podemos llegar y ir a esta página de NVM que está aquí en pantalla y aquí están
las instrucciones de instalación, simplemente compran una de estas dos líneas y al ejecutar
este comando podrán instalar NVM tal como lo he hecho yo en este caso que tengo NVM
activado. Simplemente para instalar la versión sería nvm install v16.18.1 y ya con ello
estarían instalando la versión de Node que ustedes requieren para este caso. Como pueden
ver ya yo he instalado esta versión y esta sería la forma más sencilla de poder instalar
las versiones de Node que necesitamos para llegar y empezar a ejecutar nuestro smart
contract. Adicional a esto vamos a utilizar una herramienta muy conocida dentro de lo que
sería el entorno de desarrollo dentro de Linux que sería Visual Studio Code que puede ser
obtenida desde la página oficial de Visual Studio de Microsoft. Aquí pueden descargar
esta importante aplicación, es una aplicación totalmente gratuita que se integra completamente
a lo que sería Visual Studio Code, en este caso Visual Studio Code Microsoft.
Visual Studio, aquí está Visual Studio Code. La anterior era la versión de Visual Studio
General y esta es la versión de Visual Studio Code. Aquí está la dirección correcta y simplemente
tienen que descargar algunas de las versiones, en este caso está para Linux, pueden descargarlas
también para MacOS, Windows y simplemente deben elegir la versión correcta para su
sistema operativo e instalar la misma. Una vez que tengamos estas tres herramientas que son Node,
puede ser instalado por la aplicación directamente o instalándose por medio de NVM, también tienen
que tener a la mano Ganache y instalando Visual Studio tendríamos ya las tres herramientas que
vamos a utilizar en este sencillo ejemplo que vamos a ver a continuación. Vamos a abrir un
momento Visual Studio Code y en este caso tengo algunas herramientas ya preparadas en nuestro
Visual Studio que son Ethereum Remix y algunas otras herramientas que se suelen utilizar dentro
del desarrollo de lo que es Smart Contracts escritos en Solidity o herramientas como Truffles
que también están disponibles como parte de lo que sería este editor de código para programación
que nos permite la gente de Microsoft. Sin embargo, para facilitar un poco más las cosas,
en este caso vamos a usar directamente el Remix de la página web Remix IDE,
que esto es un proyecto de la comunidad de Ethereum que nos permite generar un entorno
de programación que nos permite subir Smart Contracts escritos en el mismo a redes de pruebas
que pueden ser redes de pruebas ya dentro de lo que sería la red de Ethereum, pueden ser por
ejemplo Rinkevich, en el caso de que esté todavía en funcionamiento, que no debería estar debido a
que era una red PAU, o las diferentes pruebas de las diferentes redes de pruebas que están
actualmente dentro de Ethereum. También pueden ser desplegados dentro de lo que sería Ganache y por
eso hemos elegido Remix, en este caso simplemente tenemos que ir a IDE y aquí en Remix Online
tendremos ya nuestro entorno del Remix para poder llegar y desplegar nuestro Smart Contract.
Aquí como pueden ver ya tengo un entorno, vamos a borrarlo para empezar un trabajo desde cero,
simplemente para borrarlo escriben aquí, eligen un template en blanco y generamos nuestro
The App Example, nuestro entorno y ya tenemos un entorno completamente limpio que podemos empezar
a utilizar para generar nuestro Smart Contract. Ahora bien, con el fin de facilitar un poco la
interacción que ustedes van a tener con la generación de este pequeño ejemplo de Smart Contract,
yo he creado un GitHub.
Muy bien, en este directorio de GitHub que pueden ver, aquí yo he generado un ejemplo,
o lo que sería la plantilla de ejemplo de nuestra aplicación de Smart Contract.
Simplemente vamos a utilizar Git, que es una aplicación que está disponible para Linux,
simplemente vamos a descargar este código, podemos descargarlo como ZIP o podemos descargarlo
con la aplicación de Git. En este caso voy a utilizar Git y voy aquí a la terminal y copio
nuestra dirección y con eso voy a clonar nuestro ejemplo de aplicación descentralizada. Para las
personas que no tengan Git o no quieran complicarse con este tipo de aplicaciones adicionales,
simplemente pueden darle clic a Download ZIP y con ello descargarán el ZIP que simplemente
tienen que extraerlo y allí estará todo el código que ustedes necesitan para probar esta
aplicación descentralizada. Lo mismo que ustedes descargan con el ZIP, es lo mismo que podrán ver
dentro del clon de Git. Es la misma información, no tendrán ningún problema, simplemente deben
seguir las instrucciones que vamos a ir dando en este vídeo poco a poco. Ahora bien, ya tenemos aquí
configurada nuestra wallet metamask, en este caso está conectada a nuestro localhost 7545. En este
caso ya tenemos nuestro wallet de ganache que ya también está ejecutándose sobre el nodo 7545,
sobre la misma dirección y con ello ya nuestra wallet de metamask estará funcionando sin mayores
complicaciones dentro de lo que sería este nodo. Desbloqueamos y efectivamente ya tenemos desbloqueada,
ya podemos comunicarnos con nuestro nodo ganache que nuevamente repito, está ejecutándose como
un servicio local en el puerto 7545. Recordando un poco cómo se configura este tipo de información,
simplemente deben ir a la configuración de la metamask en la parte de redes y aquí está la
información que ustedes necesitan para reconfigurar metamask para que se comunique con nuestro nodo,
en este caso localhost o 127.0.01 que es la información que aparece aquí. Simplemente
colocando esto que está aquí, tal como está, ustedes estarán utilizando la red local y
conectándose a la interfaz que ganache está ofreciendo. De esta manera podemos utilizar
la metamask para interactuar con ganache y poder llegar y desplegar los smart contracts sin mayores
complicaciones. Lo siguiente que vamos a hacer antes de empezar es ir a nuestro ganache y importar
la primera cuenta. La primera cuenta es esta que está acá, vean que está como índice cero,
simplemente vamos a mostrar la clave y aquí pueden ver la dirección de la cuenta y la clave privada
de esa cuenta. La vamos a copiar y vamos a ir a ganache, hacemos clic aquí y vamos a hacer una
importación de cuenta. Aquí nos está viendo nuestra clave privada, la colocamos y hacemos
importar y automáticamente vemos que los mismos 100 ETH que tenemos en nuestra cuenta de ganache,
en la dirección 099B, es la misma cantidad que tenemos aquí disponible y la misma cuenta 099B.
Ya con ello ya podemos estar seguros de que estamos conectados a ganache y que no vamos a
tener ningún otro tipo de problemas con esta situación. Ahora bien, lo siguiente que vamos a
hacer en este caso es subir nuestro smart contract de ejemplo, vamos a hacer una carga, vamos aquí
a nuestro escritorio, carpeta personal de Acquire y aquí en contratos vamos a conseguir nuestro
contrato que se llama warriors.sol, vamos a abrirlo y ya está cargado nuestro contrato.
Rápidamente podemos ver que estamos hablando de lenguaje de programación Solidity, tenemos aquí
un pragma de Solidity 0.817, esto significa que vamos a utilizar o estamos requiriendo que se
utilice con este smart contract la versión de Solidity 0.817, que pueden conseguir Solidity 0.817.
La documentación está aquí en línea, pueden consultarla en cualquier momento. Toda la
documentación que está aquí es la documentación que ustedes necesitan para llegar y realizar toda
la programación en este lenguaje de programación. Simplemente esta línea nos indica o le indica en
este caso a Redmix IDE que se va a utilizar el compilador necesario para que esta versión de
Solidity pueda ejecutarse sin mayores problemas. Lo siguiente que tenemos aquí entonces es la
definición de nuestro contrato. Nuestro contrato en este caso tiene un nombre bastante sencillo
que es gain y empezamos entonces con la definición de los siguientes apartados que sería en este caso
una variable de tipo de nombre info que es un stream privado que va a estar manejándose dentro
de lo que sería nuestro contrato gain, una estructura de datos que nos permitirá generar a
un personaje, en este caso nuestro héroe, con unas variables o unos datos muy muy certeros que
son en este caso el nombre, el nivel, ataque, defensa y el último entrenamiento. Fíjense que
el nombre en este caso se trata como una cadena de caracteres, es decir números y letras y el
resto de datos se tratan como enteros de 256 bits que sería la unidad que maneja, la unidad
numérica que se maneja dentro de lo que sería Solidity. Adicional a esto generamos un mapping
que nos permitirá llegar y generar las diferentes interacciones que nuestro héroe necesitará para
poder publicar información fuera de la cadena. En este caso esta instrucción que está acá nos
permite trasladar la información que se da dentro de lo que sería el contrato de Solidity y exponerla
a una interfaz que más adelante haremos con Javascript de manera que podamos acceder a la
información y podamos llegar e interactuar con la misma sin mayores complicaciones.
Lo siguiente que vemos aquí son diferentes funciones que son las funciones que nos
permitirán ejecutar nuestro juego o generar nuestro juego como tal. En este caso lo primero
que tenemos aquí es una instrucción o una instrucción o una función que nos permite ver si
tenemos un héroe. Si no tenemos un héroe nos da un mensaje que es tú no puedes, tú no tienes un
héroe. La siguiente función en este caso es para crear un nuevo héroe dada una dirección con la
que estemos interactuando con este MarkContract. En este caso la función sólo tiene dos opciones
que es crear un nuevo héroe o indicarnos de que ya efectivamente tenemos un héroe creado y no
podemos crear otro héroe utilizando esa misma dirección que tenemos a la mano con nuestra
metamásica. La siguiente función es una función de lucha. Esta función nos permite llegar y tomar
la dirección de un enemigo y utilizar a nuestro héroe para luchar contra ese enemigo. La interacción
que se da en este caso es bastante sencilla. Si no tenemos un héroe no podemos hacer ninguna lucha.
Si tenemos un héroe con un nivel determinado vamos a pelear con nuestro enemigo y dependiendo del
nivel de ataque y defensa que tengamos en medio de la lucha vamos a tener la oportunidad de
levelear o perder nuestra batalla. En este caso simplemente con esta interacción que está acá,
estas instrucciones, nos dice que si nuestro ataque es mayor que la defensa a la que estamos
enfrentándonos vamos a levelear y en caso de que esto no se cumpla perderemos la batalla.
Lo siguiente es la capacidad de entrenar a nuestro héroe que en este caso nos pide una función
adicional que es la de si nos permite la plataforma entrenar y en caso de que podamos entrenar vamos
a poder levelear a nuestro héroe y mejorar las stats de él mismo. Esta función que está acá,
que puede entrenar, se da aquí abajo y es simplemente una pequeña verificación en cuanto
al tiempo. ¿Qué significa esto? Significa que nuestro héroe sólo podrá entrenar si se cumple
una condición de tiempo que mide el momento en que fue creado nuestro héroe y un tiempo mínimo
que en este caso establecido en un minuto para poder llegar y empezar con el entrenamiento.
Lo siguiente es la función del levelear o level up que en este caso de cumplirse o de llamarse
esta función nuestro héroe simplemente va a llegar y a subir un nivel y las stats de ataque y
defensa van a subir en un 15 y un 10 puntos correspondientemente. Finalmente tenemos una
función que en este caso es la función para obtener mi héroe y que nos regresa las stats y
el nombre de nuestro héroe como tal dependiendo de la dirección con la que estemos interactuando
dentro del Smart Contract. Como pueden ver es un contrato bastante sencillo, el contrato está bien
identificado, todas las funciones que hacen cada una de ellas es bastante elegible y les invito
a que lo examinen un poco para que puedan ver y verificar cómo funciona y todo este tipo de
cuestiones para que puedan modificarlos en caso de que tengan algunas nuevas ideas y las puedan
poner en práctica dentro lo que sería el código que ustedes puedan generar luego. Ahora bien ya
tenemos nuestro contrato, este es simplemente 65 líneas es nuestro contrato, es un contrato
bastante sencillo. Lo que nos queda es cómo empezamos con el despliegue de él mismo dentro
de lo que sería nuestra red Ganache. Muy bien, para ello lo primero que tenemos que hacer es irnos
a compilador y aquí podemos ver el compilador puesto en 0.8.17. No se preocupen por esto,
simplemente cambien a la versión 0.8.17 y damos a la opción de compilar.
Con ello ya hemos hecho la compilación de nuestro código y en este punto simplemente
nos queda desplegar este contrato. Para ello lo siguiente es ir a la opción de desplegar
y aquí tenemos varias opciones. Aquí en la sección de environment o entorno vamos a elegir
la opción de metamask y automáticamente nos detecta la metamask aquí. Aquí nos está diciendo
que 0 ethers y nos da la opción para conectarnos a la misma. En este punto vamos a hacer lo siguiente
y es desconectar
nuestra wallet de las cuentas que puedan tener alguna interacción.
No, ninguna cuenta. Las tres cuentas están completamente desconectadas.
Excepto esta. Vamos a desconectarla. Perfecto. Ahora bien, fíjense que al desconectarla
desaparece nuestra interacción anterior y esto nos permite que cuando demos clic a desplegar,
ok, aquí ya se nos pide la interacción. Aquí lo siguiente es seleccionar la cuenta
de nuestra metamask, la cuenta que hemos importado. En este caso la cuenta que tiene
los 100 ethers. Recordemos que 099 es la cuenta del metamask o la de la ganache. En este caso
que hemos habilitado dentro de nuestra metamask. Esta es la cuenta que debemos elegir y vamos a
dar siguiente. Conectamos y efectivamente ya está conectada. Ahora simplemente volvemos a
darle en desplegar y aquí nos está pidiendo nuestro despliegue del contrato. Implementación
de contrato por Remix. Aquí está toda la información. Simplemente le tenemos que dar
a confirmar y automáticamente ya la transacción ha sido confirmada. ¿Cómo sabemos que hemos hecho
la interacción de forma correcta? Si vamos a ganache, vamos a ver que nuestro bloque ya
ha cambiado de 0 a 1. Si vamos a la parte de bloques, vemos que nuestro bloque 0 aquí está,
sin transacciones. Nuestro bloque GNS se ha minado de forma correcta y luego tenemos
nuestro bloque número 1 que aquí está nuestra creación de contrato. Esta creación de contrato
que se ha dado en esta interacción que hemos hecho con Remix y efectivamente podemos decir
que hemos utilizado metamask para desplegar el contrato dentro de lo que sería la blockchain
de prueba que tenemos en ganache. Es decir, hemos tenido éxito en el despliegue de nuestro
contrato con metamask y ganache. Ahora bien, lo siguiente es ver aquí que nuestro contrato ya
está desplegado. Fíjense que tenemos las funciones create hero, fight, train, get my hero
y hero. Las funciones que están implementadas dentro del contrato están disponibles para ser
utilizadas dentro de lo que sería Remix. Es decir, en este punto ya podríamos interactuar con este
contrato y crear nuestros héroes sin mayores complicaciones. Pero vamos a ir un paso más
adelante y vamos a generar una pequeña interfaz web que nos permita interactuar con esta aplicación
y de esta forma crear lo que serían las bases de una aplicación descentralizada utilizando
Stemfile Contract y algo de programación en JavaScript. Para este caso muy particular,
lo siguiente que vamos a hacer entonces es ir a nuestra terminal y recordando que puedes tener
descargado esto dentro de lo que sería el directorio de descarga si has utilizado el .zip
o si has utilizado git clone. En este caso tendrás el repositorio clonado dentro de un
directorio que tú hayas elegido. En este caso nuestro directorio es de AppWarrior y si damos
un despliegue podemos ver todo el contenido de nuestra información. En este caso vamos a hacer
uso de lo que es Node para implementar algunas cositas, pero antes de eso quiero mostrarles
un poco las dependencias que tenemos en este caso con Node. En este caso aquí está
AppWarrior. Este es nuestro script directo o manejado por lo que sería Node o NPM para ser
más preciso, para instalar las dependencias que necesitamos para poder ejecutar este tipo de
smart contracts y todo lo que sería su Dapp que hemos generado. Las dependencias en este caso son
Express, Zerp y Web3. Entendiendo que Express es parte del código JavaScript que vamos a utilizar,
Zerp un pequeño servidor HTTP que nos permitirá ver en local nuestra aplicación descentralizada
completamente desplegada y Web3 la aplicación Web3 o el JavaScript que nos permitirá utilizar
todo el potencial de nuestra aplicación descentralizada utilizando Ganache y conectándola
a toda la codificación JavaScript que haremos de nuestra aplicación descentralizada. En este punto
para facilitar un poco el despliegue de este tipo de aplicaciones simplemente he creado todo lo
necesario para que con ejecutar NPM install ustedes puedan instalar todas las aplicaciones
que se requieren para ejecutar este tipo de información. Simplemente NPM install sobre el
directorio que han descargado o donde se encuentran estos dos archivos package.json y package.log.json
y con ello se instalará todo lo que ustedes necesitan. En este punto ya podemos abrir entonces
nuestro Visual Code. Vamos a cerrarlo aquí un momento y lo ejecutamos por consola para abrir
todo lo que sería el contenido de los archivos que están dentro de ese espacio. Aquí tenemos
entonces nuestro código fuente de lo que sería la aplicación descentralizada que hemos generado
en este caso y nuestro código fuente básicamente se basa en lo que está escrito en index.html que
es la aplicación o el código html necesario para generar toda la interacción en lo que
sería nuestro navegador. Index.js que serían las funciones escritas en JavaScript que nos
permitirán interactuar con la parte web 3 de nuestra aplicación descentralizada y algunos
scripts adicionales que en este caso son jQuery y Bootstrap que en este caso sería para los estilos
de manera que podamos tener cierto estilo gráfico dentro de nuestra aplicación.
Rápidamente vamos a ir entonces aquí a la parte relevante que es index.js y vamos a explicar un
poco aquí qué tenemos entre manos. Aquí hay que hacer algunas modificaciones para que puedan ver
el ejemplo funcionando de forma correcta y que ustedes también tendrán que hacer en casa para
poder llegar y poder generar la interacción que se desea. En primer lugar tenemos aquí
una conexión con lo que sería nuestro nodo local. Recordemos nuevamente
ganache se está ejecutando dentro de esta dirección y en este punto lo que estamos
haciendo es indicándole a nuestra interacción que el proveedor de nuestros servicios web 3 va
a estar en la dirección 127.0.0.1.7545 es decir se está ejecutando el local en el puerto 7545.
Generando esto o abriendo esto ya comenzamos entonces a indicarle al entorno de nuestra
aplicación descentralizada que nuestra aplicación o nuestro contrato como tal está desplegado dentro
de lo que sería esta red. Lo siguiente que vemos aquí es la dirección de nuestro contrato y aquí
es muy importante no haber cerrado la parte de Remix. Fíjense que la dirección del contrato en
este caso es 0x12d pero con el despliegue que he hecho ya anteriormente que es el que expliqué
hace un momento nuestra dirección ha cambiado a 0xd7c. Vamos a copiar esta dirección y estoy
seguro que ustedes también tendrán otra dirección distinta pero copien esta dirección porque esta es
la dirección exacta en donde se ha desplegado nuevamente nuestro contrato. Simplemente cambiamos
aquí y ya con ello ya empezamos nuestro primer paso con respecto a la interacción. El siguiente
punto es la ABI. La ABI es simplemente un pequeño archivo JSON que se genera dentro de lo que sería
la compilación de Remix que nos permite crear una interconexión entre lo que sería nuestra parte
de Javascript y el contrato escrito en Solidity. Eso, este JSON o esta ABI como tal se genera
dentro de Remix y la pueden buscar en la parte de compilación y aquí está nuestra ABI. Simplemente
hacen clic y pueden desplegar la misma. Vamos a abrir un archivo. Pueden desplegar la misma con
cortar y pegar que esta es toda la ABI. Esta ABI la he transformado en una sola línea y la he
sintetizado en esta línea que ustedes pueden ver aquí que estoy siguiendo en pantalla. Es la misma
ABI que está en este archivo. Simplemente hay que simplificar sin espacio, sin nada de este tipo de
cuestión para que quepa la misma en una sola línea. Esta ABI es importante porque el siguiente punto
para poder interactuar con nuestro contrato es generar una interfaz entre nuestro contrato que
va a ser la ABI y la dirección de nuestro contrato. De esta manera nosotros podemos tener acceso a los
métodos y a las funciones que están dentro de nuestro contrato. Así que esta instrucción que
ve acá se encarga precisamente de eso, generar toda la estructura básica para que podamos acceder
a estas funciones sin mayores complicaciones. Lo siguiente es crear una variable para la cuenta
que nos va a ser muy útil para generar otras interacciones más adelante y aquí comienza
entonces la generación de nuestra aplicación descentralizada como tal. Lo primero que tenemos
es una función para conectarnos a la Wallet Metamask. Como ven está también documentada
nuestra función GetAccount y rápidamente pedimos información a la Metamask para las cuentas que
están registradas dentro de las mismas. En caso de que no haya ninguna cuenta o no tenga ninguna
Wallet registrada simplemente vamos a recibir un error y en caso de que tengamos cuentas registradas
vamos a tomar la cuenta número 0 para ese tipo de interacción. Simplemente esto se encarga de
que nos presente todas las funciones necesarias para llegar e interconectarla con nuestra Wallet
Metamask. Esto es activado dentro de nuestro código HTML utilizando esta función que nos
permite desplegar un botón que se llama Connect Wallet y que al hacer clic sobre él simplemente
vamos a llamar a la función que estamos viendo aquí en el índex GetAccount y con ello vamos a
empezar a interactuar con nuestra Wallet Metamask para que pueda conectarse y entonces obtener las
cuentas necesarias para empezar la interacción con nuestro smart contract. Aquí ya una vez conectados
a nuestro smart contract lo siguiente que vamos a hacer es obtener el error que tengamos o que
queramos crear en este caso. Si no tenemos ninguna Wallet definida nos va a dar un error pero si ya
está definida que en este caso fue el caso anterior nos va a permitir hacer una llamada a los métodos
que el contrato ha abierto para nosotros mediante la ABI y vamos a obtener la información que en
este caso sería la información de nuestro nombre, el nombre del héroe, la cuenta en la que está registrada,
el nivel, el ataque, la defensa, toda la información de nuestro héroe se va a desplegar en pantalla y
esta información la podemos ver dentro de lo que sería el código html en la siguiente parte que
tenemos aquí. Aquí vemos que se abre un pequeño form en el que podemos setear nuestro nombre
y generar nuestro héroe y también podemos ver otra sección en la que podemos desplegar todo lo que
sería la información de nuestro héroe. Esta función o esta sección que está aquí es la que se
interconecta con esta para que podamos desplegar los datos de nuestro héroe. También está la función
de crear nuestro héroe en este caso simplemente leemos la información que sería el nombre de
nuestro héroe y la agregamos en una transacción que podemos ver aquí nuestra función contract
method createHero, enviamos la información, la cuenta y el número de gas a pagar que vamos a
hacer para tal operación. La salida de todo esto es simplemente una salida en consola de lo que
sería la transacción, su información y una alerta de la generación de esta operación.
También tenemos la función para entrenar nuestro héroe y la función para realizar una pelea o una
batalla de nuestro héroe con un héroe enemigo. Estas funciones todas están debidamente identificadas
con la parte en html y pueden fácilmente ver y verificar cómo funciona cada una de estas para
llegar y tener la interacción o modificarlas en caso de que ustedes deseen con la misma.
Ahora bien, como ya dije antes, importante para que tengan una una interacción correcta con este
smart contract es cambiar la dirección en el caso en el que ustedes estén generando o hayan
desplegado el contrato la dirección va a ser completamente distinta y simplemente cuidar
la dirección del proveedor teniendo en cuenta que GANACHE en esta sección te va a decir en
dónde está ubicada cada una de las direcciones o el puerto con el que se deben conectar para
poder interactuar con esta blockchain de pruebas que está aquí. Ahora bien, ya con esto hemos
hecho un pequeño análisis del código que está desplegado frente a ustedes y lo siguiente sería
utilizarlo. Para ello vamos a ir a nuestra consola y recordemos que entre las dependencias que están
dentro del paquete está SERP. Escribimos esa instrucción y con ello ya tenemos un servidor
local que nos permitirá probar esta aplicación descentralizada. Simplemente le hacemos clic y ya
con ello tenemos nuestra aplicación descentralizada. Esto, así de sencillo como se ve,
nos permitirá interconectar e interactuar con nuestra aplicación sin mayores complicaciones.
Vamos a desconectar la cuenta aquí porque ya he hecho otras interacciones anteriores
y cambiamos a la cuenta número 13. Muy bien, recordemos entonces que la primera función que
tenemos es la de conectar a la wallet. Simplemente le damos clic y aquí automáticamente ya está
funcionando nuestra wallet. Vamos a elegir la cuenta número 13, en este caso tiene 99.97 ETH
y damos siguiente y conectamos. Ya con ello ya hemos generado la primera interacción que sería
conectarnos con nuestra wallet y efectivamente nos dice que el sitio está conectado. Lo siguiente
entonces en este caso sería crear nuestro héroe, obtener la información de nuestro héroe, entrenar
nuestro héroe o preparar una batalla con el enemigo. Vamos a empezar con crear nuestro héroe
y vamos a poner nombre de prueba y generamos nuestro héroe. Aquí nos ha dado la advertencia
de que se ha generado el objeto, aceptamos y para ver que todo esté funcionando de forma correcta
vamos aquí a inspeccionar y vamos a la consola. Y efectivamente aquí podemos ver que nuestra
cuenta es 099B, es la cuenta que está utilizando, la misma cuenta número 1 que podemos ver acá.
Cuando hicimos clic en crear tu héroe hemos generado una transacción que es esta información
que está acá. Toda la información de la transacción, aquí está, ha ido la transacción desde nuestra
cuenta en Metamask a la dirección del contrato que es 0x12. Podemos verificar efectivamente que
esta es la dirección del contrato, 0x12. Y finalmente
podemos llegar y tener atención o podemos llegar y ejecutar la siguiente instrucción que es la de
obtener la información del héroe. Ok, ya en este punto al hacer clic en Get Info Hero, podemos
obtener la información del héroe que se ha generado. En este caso como podemos ver la misma
dirección que hemos utilizado, que es la dirección que tenemos activa dentro de nuestra metamask, 099B.
Aquí está nuestro héroe de nombre prueba con el nivel 1, nivel de ataque 100, defensa 100 y sin
ningún entrenamiento realizado. Simplemente ya con esto podemos ver en nuestra ganache todas
las operaciones que se han realizado. Aquí está nuestra generación del héroe y en este punto nos
quedarían las últimas dos interacciones que serían entrenar tu héroe y generar una batalla. Para
entrenar tu héroe simplemente podemos hacer clic y automáticamente vemos la transacción de
entrenamiento, que en este caso se ha podido generar porque se cumplen las condiciones que
están dentro del contrato. Recordemos que si esta función no se cumple no podremos entrenar
nuestro héroe y de hecho si hacemos clic nuevamente entrenar nuestro héroe, como ya hemos entrenado
nuestro héroe de forma reciente, nos dice que automáticamente no podemos entrenarlo todavía
porque no se han cumplido las condiciones de nuestro contrato. Entonces en este punto si vamos
a obtener información de nuestro héroe podemos ver que nuestro héroe ya ha pasado a nivel 2 y que se
cumple la condición del contrato que es aumentar el nivel de ataque en 15 puntos y el de defensa en
10. Y aquí está nuestra timestamp del último entrenamiento realizado. Si queremos preparar
una batalla lo único que debemos hacer entonces es generar un héroe en otra dirección para llegar
y empezar con el proceso de batalla. En este caso vamos a ir aquí un momento a nuestra wallet porque
ya tenemos otros héroes generados en otras direcciones y vamos a tomar
las mismas
para generar esta interacción. Vamos a buscar aquí
en este caso 0-12
vamos a probar
si ejecutamos aquí y preparamos una batalla nos dice que no podemos porque el enemigo o la dirección
de enemigo no tiene ningún héroe. Entonces podemos estar seguros de que la programación que está dentro
del smart contract se ha cumplido en cada uno de los casos para este punto en particular. La única
forma en que podamos tener una batalla es que generemos un héroe adicional que nos permita
llegar y crear ese tipo de interacción. Es decir esto simplemente se podría hacer si generamos
desde otro navegador o desde una red una cuenta distinta dentro de lo que sería el smart contract
para llegar y generar este tipo de interacción. Así como pueden ver de forma bastante sencilla
se puede generar una aplicación descentralizada. En este caso es una aplicación sin mayores
complicaciones simplemente es una interfaz que nos interconecta con nuestro smart contract
desplegado en ganache y con ello utilizando nuestra metamask podemos llegar e interactuar
con las diferentes funciones que están dentro de ese smart contract y poder generar así una
aplicación descentralizada sin mayores complicaciones. El código que ven en pantalla como ven está bien
documentado. Les invito nuevamente a que lo lean, a que lo estudien e interactúen con el mismo. Si
quieren hacer modificaciones pueden hacerlas de manera que puedan investigar o tener idea del
alcance de este tipo de tecnología y para que entiendan también lo sencillo que puede ser
este tipo de aplicaciones de generarse y de crear todo tipo de estructuras que podamos tener en
mente. Dicho esto les invito entonces a que descarguen todo el código necesario. El github
donde está este código está aquí disponible. Dentro de lo que sería la descripción del
vídeo van a encontrar la dirección para que puedan descargar este código y puedan estudiarlo y de
esa manera puedan generar esta pequeña aplicación desde su casa y poder interactuar con ella sin
mayores complicaciones. Nos vemos en un próximo vídeo. ¡Hasta luego!
