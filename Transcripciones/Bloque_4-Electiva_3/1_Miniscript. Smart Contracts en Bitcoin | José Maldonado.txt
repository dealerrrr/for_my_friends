Una de las grandes características de Bitcoin es que su comunidad siempre está en constante
desarrollo y parte de ese desarrollo lo podemos ver en pantalla con este proyecto llamado
Miniscript. Miniscript busca convertirse en un nuevo desarrollo para Bitcoin que
permita a los desarrolladores de diferentes plataformas crear o generar Bitcoin Script
de forma mucho más sencilla utilizando otros lenguajes como pueden ser ROS, C++ o directamente
lenguajes como Python. La idea es que podamos utilizar estos lenguajes de programación que
son mucho más sencillos y mucho más amigables para programar para generar Bitcoin Script que
pueda ser leído o entendido por la red Bitcoin sin mayores modificaciones en todo lo que es el
lenguaje de programación Bitcoin Script como tal. Simplemente ajustaríamos una especie de
framework o conector para llegar y permitir que los desarrolladores puedan crear aplicaciones
mucho más avanzadas utilizando estas funciones que Miniscript pone a disposición. Miniscript
ya lleva algún tiempo desarrollándose y todavía es considerado una tecnología previa, es decir,
todavía no está completamente integrada dentro de lo que sería la tecnología de Bitcoin. Los nuevos
de Bitcoin no entenderían directamente Bitcoin Script pero sí serían capaces de leer el resultado
de ese Bitcoin, de ese Miniscript. Es decir, una vez que nosotros programamos en ROS y generamos
todo lo que se deba generar, el código que se va a generar utilizando Miniscript, lo que tendríamos
sería un código de Bitcoin Script que podríamos llegar y enviar a la red y este sería leído sin
mayores complicaciones. Sin embargo, la idea es integrar directamente estas capacidades a Bitcoin
para que esta generación sea mucho más fácil y mucho más rápida y segura para que entonces podamos
implementar nuevas funciones que nos permitan desarrollar nuevas funciones dentro de Bitcoin.
Parte de esos desarrollos que se dan sobre Miniscript lo vemos en Minsc. Minsc, que estamos
viendo ahorita en pantalla en la web principal, es un desarrollo que busca crear un lenguaje de
scripting utilizando las capacidades de Miniscript. Básicamente es transformar la dificultad de
Miniscript del lenguaje como sería el uso de ROS para crear Miniscript. Lo que se busca es facilitar
esos desarrollos creando una capa de atracción que nos permita generar script de Bitcoin mucho
más potente y con una forma mucho más sencilla y manejable para cualquier persona. Por ejemplo,
aquí en la página principal podemos ver un compilador en vivo de este lenguaje junto con
las características o las salidas que da en este caso de las políticas de Miniscript,
el descriptor de Minscript y el Bitcoin script como tal. Abajo podemos ver algunos ejemplos,
en este caso son ejemplos de operadores lógicos, pero busquemos uno en el que tengamos algunas
cosas bien interesantes. Por ejemplo, este que estamos viendo aquí, vamos a cargarlo,
este que tenemos aquí lo voy a explicar para que ustedes entiendan qué es lo que está haciendo.
En este caso tenemos una cantidad de directores, que en este caso es esta función que está aquí,
y a estos directores tenemos tres claves públicas bien identificadas que son la clave pública de A,
B y C. Son nuestros tres directores. Adicional a estos tres directores tenemos una clave pública
para el SEO y una clave pública que debe ser manejada por alguno de los directores.
¿Qué significa esto? Que tenemos un grupo de directores que están autorizados para hacer
una transacción dentro de una dirección de Bitcoin o dentro de un grupo de direcciones
de Bitcoin y adicional a esto debemos sumar la clave pública del SEO. Esto perfectamente
permitiría crear DAOs en las que todas las personas que están dentro de esa DAO son capaces
de manejar la bóveda del dinero que está dentro de la DAO o que se maneja dentro de la DAO. En
este caso para poder realizar una operación que sea válida sería necesaria la clave pública del
SEO, es decir, que el SEO firme la transacción y que alguno de estos tres directores firme la
transacción también. Es decir, sería un esquema de cuatro, en este caso cuatro porque serían las
tres de los directores y la del SEO, de cuatro, dos. Es decir, de cuatro firmas que tengo para
manejar me bastan con que dos firmas estén dentro del sistema para que la transacción sea tomada
como válida. ¿Qué genera esto? Pues bien, en primer lugar tenemos aquí el Minsc, pero esto
también deriva en una serie de código intermedio que es generado por Minscript. En este caso el
código intermedio va por la parte de las políticas que es el que estamos viendo aquí en pantalla,
aquí. Esto es la política de Minscript, como pueden ver es bastante más complejo de leer que
lo que sería el lenguaje de programación Minsc, en este caso el script Minsc, y también adicionar
a esto también tenemos el descriptor, el manuscript, que sería el equivalente del
manuscript de lo que estamos viendo acá. Como pueden ver también es bastante complejo de leer,
pero es mucho más legible que el caso de la política. Sin embargo, este no es el final de
nuestro script de Minsc, sino que esto al final es transformado en el equivalente de Bitcoin script,
que es lo que estamos viendo ahorita aquí en pantalla. Este sería el código que finalmente
llegaría a las transacciones de Bitcoin y que sería revisado directamente por los nodos. Como
pueden ver, podemos ver que se hace un empuje de datos, en este caso esta instrucción que está
aquí me pide que haga un empuje de datos de 36 bytes, y luego empiece con el proceso de
verificaciones de firmas y verificaciones adicionales para ver si se cumplen las condiciones
descritas por el Minsc. Al final todas esas verificaciones se realizan y se completa con
un check multisig, porque estamos delante de un monedero de multifirmas, en este caso con el
esquema 2.4. Fácilmente se puede ver la diferencia del lenguaje y de capacidad de programación que
tenemos entre Minsc, Minscript y Bitcoin script. Bitcoin script es el lenguaje puro de Bitcoin y
es bastante complejo de leer, pero es conocido y es aceptable en términos de utilización para
lo que sería un programador humano. Minscript también es un poco más legible o también tiene
sus complejidades, pero todavía es mucho más sencillo de manejar. La Policy también es mucho
más sencilla de manejar, pero con Minsc toda esta capa de lo que sería intermediarios de
complicaciones con la parte de lo que sería la criptografía y todo este proceso interno que se
realiza dentro de estos scripts, se lleva a su mínima expresión y nos permite crear código que
fácilmente puede llegar y hacer cualquier persona que tenga un conocimiento mínimo de este tipo de
programación. Ahora, este código que está aquí es un sistema que nos permite crear un
multisig de 4-2, como habíamos comentado al principio. O sea, de cuatro firmas que hay,
solo dos se necesitan para cumplir las condiciones. ¿Qué pasaría si yo necesito o necesitamos crear
un sistema en el que todos tengan que ingresar sus firmas digitales para llegar y verificar la
transacción? Pues simplemente, con cambiar una instrucción, ya estaríamos haciendo esto. Lo
que hemos cambiado aquí es que de todos los directores vamos a necesitar la firma y del
CEO también. Ya con este cambio, simplemente nos cambia toda la política, el Minsc y el
Bitcoin Script resultante final. Y lo podemos ver en vivo, porque si volvemos al cambio anterior,
rápidamente vemos el resultado de los cambios que estamos teniendo dentro de nuestro script.
Este es una tecnología que aún está en desarrollo, al igual que otras tecnologías
dentro de Bitcoin, como podría ser Taro Protocol, pero es parte fundamental de lo que se está
intentando hacer dentro de Bitcoin, que es mantener la cantidad de complejidades al
mínimo y al mismo tiempo ofrecer funciones avanzadas que le permitan a los desarrolladores
crear aplicaciones mucho más complejas y completas que respondan a las necesidades
de las personas que utilizan estas redes. Con eso los dejo y les invito a que utilicen
este sistema para que puedan verificar y ver de primera mano el potencial que tiene.
